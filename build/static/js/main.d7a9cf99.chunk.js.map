{"version":3,"sources":["utils.js","useNet.js","App.js","index.js"],"names":["ipRegex","maskRegexA","maskRegexB","maskRegexC","getBroadcast","ip","mask","test","validateMaskIp","index","exec","ipToBinary","replace","ipBinary","split","i","length","a","b","c","d","toDecimal","join","ipToDecimal","validateMask","getClass","toBinary","Number","binaryIp","substr","number","total","positions","Array","fill","Math","pow","reverse","nbSubNetsToMask","nbSubNets","decimalNumber","repeat","ipClass","getDefaultMask","useNet","useState","validIp","setValidIp","setIpBinary","setIpClass","maskClass","setMaskClass","nbUnusedGroups","setNbUnusedGroups","validMask","setValidMask","validMaskIp","setValidMaskIp","maskBinary","setMaskBinary","addNet","setAddNet","nbUsedBits","setNbUsedBits","broadcast","setBroadcast","subNetInc","setSubNetInc","possibleSubNets","setPossibleSubNets","possibleMachines","setPossibleMachines","useEffect","getAddNet","toUpperCase","n","binaryFormat","res","getNbBitsForSubNet","getMaskClass","isNumeric","str","isNaN","parseInt","App","setIp","setMask","maskOrNbSubNets","setMaskOrNbSubNets","isMask","setIsMask","isNumber","setIsNumber","window","dataMask","setDataMask","text","value","show","className","placeholder","onChange","e","target","filter","map","item","key","onDoubleClick","el","document","createElement","body","appendChild","select","execCommand","removeChild","copyToCliboard","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d7a9cf99.chunk.js","sourcesContent":["export const ipRegex = /\\b(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\b/\nconst maskRegexA = /\\b(255)\\.(0|128|192|224|240|248|252|254)\\.(0)\\.(0)\\b/\nconst maskRegexB = /\\b(255)\\.(255)\\.(0|128|192|224|240|248|252|254)\\.(0)\\b/\nconst maskRegexC = /\\b(255)\\.(255)\\.(255)\\.(0|128|192|224|240|248|252|254)\\b/\n\nexport function getAddNet(ip, mask) {\n    if (!ipRegex.test(ip) || !ipRegex.test(mask))\n        return null\n\n    const [, a, b, c, d] = ipRegex.exec(ip)\n    const [, aM, bM, cM, dM] = ipRegex.exec(mask)\n\n    return [a & aM, b & bM, c & cM, d & dM].join(\".\")\n}\n\nexport function getBroadcast(ip, mask) {\n    if (!ipRegex.test(ip) || !ipRegex.test(mask) || validateMaskIp(mask, ip) === -1)\n        return null\n\n    let index = /0+/.exec(ipToBinary(mask).replace(/\\s/g, \"\")).index\n    let ipBinary = ipToBinary(ip).replace(/\\s/g, \"\").split(\"\")\n\n    for (let i = index; i < ipBinary.length; i++)\n        ipBinary[i] = \"1\"\n\n    return ipToDecimal(ipBinary.join(\"\"))\n}\n\nexport function validateMask(mask) {\n    if (maskRegexA.test(mask)) {\n        return 1\n    } else if (maskRegexB.test(mask)) {\n        return 2\n    } else if (maskRegexC.test(mask)) {\n        return 3\n    }\n    return -1\n}\n\nexport function validateMaskIp(mask, ip) {\n    if (maskRegexA.test(mask) && getClass(ip) === \"a\") {\n        return 1\n    } else if (maskRegexB.test(mask) && getClass(ip) === \"b\") {\n        return 2\n    } else if (maskRegexC.test(mask) && getClass(ip) === \"c\") {\n        return 3\n    }\n    return -1\n}\n\nexport function getNbBitsForSubNet(mask) {\n    let n = null\n    if (maskRegexA.test(mask)) {\n        n = maskRegexA.exec(mask)[2]\n    } else if (maskRegexB.test(mask)) {\n        n = maskRegexB.exec(mask)[3]\n    } else if (maskRegexC.test(mask)) {\n        n = maskRegexC.exec(mask)[4]\n    }\n\n    if (n && n !== '0') {\n        let binaryFormat = toBinary(Number(n))\n        let res = /\\b1+/.exec(binaryFormat)\n        if (res) {\n            return res[0].length\n        }\n    } else if (n === '0') {\n        return 0\n    } else {\n        return null\n    }\n}\n\nexport function ipToBinary(ip) {\n    if (! ipRegex.test(ip))\n        return null\n    const [, a, b, c, d] = ipRegex.exec(ip)\n    return [toBinary(Number(a)), toBinary(Number(b)), toBinary(Number(c)), toBinary(Number(d))].join(\"  \")\n}\n\nexport function getClass(ip) {\n    if (ipRegex.exec(ip)) {\n        const [, a,] = ipRegex.exec(ip)\n        let binaryIp = toBinary(a)\n        if (binaryIp.substr(0, 1) === \"0\") {\n            return \"a\"\n        } else if (binaryIp.substr(0, 2) === \"10\") {\n            return \"b\"\n        } else if (binaryIp.substr(0, 3) === \"110\")\n            return \"c\"\n        else if (binaryIp.substr(0, 4) === \"1110\")\n            return \"d\"\n    }\n    return \"\"\n}\n\nexport function getMaskClass(mask) {\n    if (maskRegexA.test(mask)) {\n        return \"a\"\n    } else if (maskRegexB.test(mask)) {\n        return \"b\"\n    } else if (maskRegexC.test(mask)) {\n        return \"c\"\n    }\n    return \"\"\n}\n\nfunction toBinary(number) {\n    let total = 0\n    let positions = new Array(8).fill(0)\n\n    for (let i = 7; i >= 0; i--) {\n        if (Math.pow(2, i) + total <= number) {\n            positions[i] = 1\n            if ((total += Math.pow(2, i)) === number)\n                break\n        }\n    }\n\n    return positions.reverse().join(\"\")\n}\n\nfunction toDecimal(number) {\n    let total = 0\n    number = number.split(\"\").reverse().join(\"\")\n\n    for (let i = 0; i < number.length; i++) {\n        if (number[i] === \"1\")\n            total += Math.pow(2, i)\n    }\n\n    return total\n}\n\nfunction ipToDecimal(ip) {\n    let reg = /((0|1){8})((0|1){8})((0|1){8})((0|1){8})/\n    const [, a,, b,, c,, d] = reg.exec(ip)\n\n    return [toDecimal(a), toDecimal(b), toDecimal(c), toDecimal(d)].join(\".\")\n}\n\nfunction getDefaultMask(ip) {\n    const ipClass = getClass(ip)\n    if (ipClass === \"a\") {\n        return \"255.0.0.0\"\n    } else if (ipClass === \"b\") {\n        return \"255.255.0.0\"\n    } else if (ipClass === \"c\") {\n        return \"255.255.255.0\"\n    } else {\n        return null\n    }\n}\n\nexport function nbSubNetsToMask(nbSubNets, ip) {\n    if (! ipRegex.test(ip) || nbSubNets < 1 || nbSubNets > 128)\n        return null\n\n    let i;\n    for (i = 0;;i++) {\n        if (Math.pow(2, i) >= nbSubNets)\n            break;\n    }\n    let decimalNumber = \"1\".repeat(i) + \"0\".repeat(8 - i)\n    let mask = getDefaultMask(ip)\n    if (mask !== \"\") {\n        mask = mask.replace(/0/, toDecimal(decimalNumber))\n    }\n\n    return mask\n}\n","import { useState, useEffect } from 'react'\n\n\nimport {\n    ipRegex,\n    getAddNet,\n    getClass,\n    getNbBitsForSubNet,\n    ipToBinary,\n    validateMask,\n    getBroadcast,\n    validateMaskIp,\n    getMaskClass\n} from './utils'\n\n\nexport default function useNet(ip, mask) {\n\n    const [validIp, setValidIp] = useState()\n    const [ipBinary, setIpBinary] = useState();\n    const [ipClass, setIpClass] = useState();\n\n    const [maskClass, setMaskClass] = useState();\n    const [nbUnusedGroups, setNbUnusedGroups] = useState();\n    const [validMask, setValidMask] = useState();\n    const [validMaskIp, setValidMaskIp] = useState();\n    const [maskBinary, setMaskBinary] = useState();\n\n    const [addNet, setAddNet] = useState();\n    const [nbUsedBits, setNbUsedBits] = useState();\n    const [broadcast, setBroadcast] = useState();\n    const [subNetInc, setSubNetInc] = useState();\n    const [possibleSubNets, setPossibleSubNets] = useState();\n    const [possibleMachines, setPossibleMachines] = useState();\n\n    useEffect(() => {\n        setValidMaskIp(validateMaskIp(mask, ip) !== -1)\n        setAddNet(getAddNet(ip, mask))\n        setBroadcast(getBroadcast(ip, mask))\n\n    }, [ip, mask])\n\n    useEffect(() => {\n        setValidIp(ipRegex.test(ip))\n        setIpBinary(ipToBinary(ip))\n        setIpClass(getClass(ip).toUpperCase())\n    }, [ip])\n\n    useEffect(() => {\n        setMaskBinary(ipToBinary(mask))\n        setNbUsedBits(getNbBitsForSubNet(mask))\n        setValidMask(validateMask(mask) !== -1)\n        setNbUnusedGroups(3 - validateMask(mask))\n        setMaskClass(getMaskClass(mask).toUpperCase())\n    }, [mask])\n\n    useEffect(() => {\n        setSubNetInc(Math.pow(2, 8 - nbUsedBits))\n        setPossibleSubNets(Math.pow(2, nbUsedBits))\n        setPossibleMachines(Math.pow(2, 8 - nbUsedBits + 8 * nbUnusedGroups) - 2)\n    }, [nbUsedBits, nbUnusedGroups]);\n\n\n\n    return {\n        validIp,\n        ipBinary,\n        ipClass,\n\n        maskClass,\n        nbUnusedGroups,\n        validMask,\n        validMaskIp,\n        maskBinary,\n\n        addNet,\n        nbUsedBits,\n        broadcast,\n        subNetInc,\n        possibleSubNets,\n        possibleMachines,\n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport { nbSubNetsToMask, validateMask } from './utils'\nimport useNet from './useNet'\n\nfunction isNumeric(str) {\n  if (typeof str != \"string\" || /\\./.test(str))\n    return false // we only process strings!\n  return !isNaN(str) // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n         && !isNaN(parseInt(str)) // ...and ensure strings of whitespace fail\n}\n\nfunction copyToCliboard(str) {\n  const el = document.createElement('textarea');\n  el.value = str;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  document.body.removeChild(el);\n}\n\n\nfunction App() {\n\n  const [ip, setIp] = useState(\"192.168.1.1\");\n  const [mask, setMask] = useState(\"\")\n\n  const [maskOrNbSubNets, setMaskOrNbSubNets] = useState(\"255.255.255.192\")\n\n  const [isMask, setIsMask] = useState(true)\n  useEffect(() => {\n    setIsMask(validateMask(maskOrNbSubNets) !== -1)\n  }, [maskOrNbSubNets])\n\n  const [isNumber, setIsNumber] = useState(false)\n  useEffect(() => {\n    window.isNumeric = isNumeric;\n    setIsNumber(isNumeric(maskOrNbSubNets))\n  }, [maskOrNbSubNets])\n\n  useEffect(() => {\n    setMask(() =>\n      Number(maskOrNbSubNets) || Number(maskOrNbSubNets) === 0\n      ? nbSubNetsToMask(maskOrNbSubNets, ip)\n      : maskOrNbSubNets\n    )\n  }, [maskOrNbSubNets, ip])\n\n  const {\n    validIp, validMask, validMaskIp,\n    ipBinary, ipClass,\n    maskBinary, maskClass,\n    addNet, broadcast,\n    nbUsedBits, subNetInc, possibleSubNets, nbUnusedGroups, possibleMachines\n  } = useNet(ip, mask)\n\n  const [dataMask, setDataMask] = useState([])\n  useEffect(() => {\n    setDataMask([\n      { text: \"Mask\", value: mask, show: isNumber && maskOrNbSubNets > 0 && maskOrNbSubNets < 129},\n      { text: \"La classe (IP)\", value: ipClass, show: validIp },\n      { text: \"Ip en binaire\", value: ipBinary, show: validIp },\n      { text: \"Masque en binaire\", value: maskBinary, show: validMask },\n      { text: \"La classe (Masque)\", value: maskClass, show: !validMaskIp && validMask },\n      { text: \"@ Reseau\", value: addNet, show: validMaskIp},\n      { text: \"@ Broadcast\", value: broadcast, show: validMaskIp},\n      { text: \"Nb bits SR\", value: nbUsedBits, show: validMask && nbUsedBits > 0},\n      { text: \"Incrementation SR\", value: subNetInc, show: validMask && nbUsedBits > 0},\n      {\n        text: \"Nb SR possible\",\n        value: \"2^\" + nbUsedBits + \" = \" + possibleSubNets,\n        show: validMask && nbUsedBits > 0 && isMask\n      },\n      {\n        text: \"Nb machines possible\",\n        value: \"2^\" + (8 - nbUsedBits + 8 * nbUnusedGroups )+ \" - 2 = \" + possibleMachines,\n        show: validMask && nbUsedBits > 0\n      }\n    ])\n  }, [mask, isNumber, ipClass, validIp, ipBinary, maskBinary, validMask, maskClass, validMaskIp, addNet, broadcast, nbUsedBits, subNetInc, possibleSubNets, isMask, nbUnusedGroups, possibleMachines])\n\n  return (\n    <div className=\"flex flex-col max-w-2xl min-h-screen px-4 mx-auto\">\n      {/* box1 */}\n      <div className=\"flex-auto mt-10\">\n        {/* inputs */}\n        <input value={ip} placeholder=\"IP\" onChange={(e) => setIp(e.target.value)}\n          className={`block w-full px-4 py-2 text-xl border rounded-sm ${validMaskIp ? 'border-green-500' : ''}`}\n        />\n        <input value={maskOrNbSubNets} onChange={(e) => setMaskOrNbSubNets(e.target.value)} placeholder=\"Masque ou nombre de sous-reseaux\"\n          className={`block w-full px-4 py-2 mt-4 text-xl border rounded-sm ${validMaskIp ? 'border-green-500' : ''}`}\n        />\n        {/* // inputs */}\n\n        {/* table */}\n        <div className=\"mt-8 overflow-x-auto font-mono\">\n          <table className=\"w-full\">\n            <thead></thead>\n            <tbody>\n            {dataMask.filter(i => i.show).map((item, index) => (\n              <tr className=\"border border-gray-400\" key={index}>\n                <td className=\"p-1 tracking-tight select-none\">{ item.text }</td>\n                <td className=\"p-1 whitespace-no-wrap border-l border-gray-400\"\n                  onDoubleClick={() => copyToCliboard(item.value)}\n                >{ item.value }</td>\n              </tr>\n            ))}\n            </tbody>\n          </table>\n        </div>\n        {/* // table */}\n      </div>\n\n      {/* box2 */}\n      <ul className=\"mt-2 text-xs text-gray-600\">\n        <li>- nb: nombre de</li>\n        <li>- @ : addresse</li>\n        <li>- SR: sous-reseau</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}